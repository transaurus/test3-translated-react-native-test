{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.72/performance.md",
  "source_file_content_hash": "8fdaf3ef2a1921edb143cf501c7dc8c39ac8a961bfc38c99e81b2dd636bf0059",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: performance\ntitle: Performance Overview\n---",
      "source_content_hash": "9200ee00fa8c09da75dacf98907e5ff667ae23ff541bb8721a9fb962d7c67c5a",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A compelling reason for using React Native instead of WebView-based tools is to achieve 60 frames per second and a native look and feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we're not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary. We try our best to deliver buttery-smooth UI performance by default, but sometimes that isn't possible.",
      "source_content_hash": "1f1b3a4c2479b4eb01dc4bb60cdc1be92321b377c1c8c8e8d8a1e93639535fea",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "相較於基於 WebView 的工具，使用 React Native 的一個重要原因是為了實現每秒 60 幀的流暢度以及應用程式的原生外觀和感覺。在可能的情況下，我們希望 React Native 能夠自動處理正確的事情，讓您專注於應用程式本身而非效能優化。然而，目前仍有一些領域我們尚未完全實現這一目標，還有一些情況下 React Native（類似於直接編寫原生代碼）無法自動為您確定最佳優化方式，因此需要手動介入。我們盡最大努力預設提供如絲般順滑的 UI 效能，但有時這並不可行。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This guide is intended to teach you some basics to help you to [troubleshoot performance issues](profiling.md), as well as discuss [common sources of problems and their suggested solutions](performance.md#common-sources-of-performance-problems).",
      "source_content_hash": "88c4138b7de79fa513420eeae74946b4140efae9e71dd36822970217a732f41d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南旨在教您一些基礎知識，幫助您[排查效能問題](profiling.md)，並討論[常見問題來源及其建議解決方案](performance.md#common-sources-of-performance-problems)。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## What you need to know about frames",
      "source_content_hash": "86bfed416e450cfde668ace0cc41891e1c4e557ef256f152b01527164c237015",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 關於幀的基礎知識"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "Your grandparents' generation called movies [\"moving pictures\"](https://www.youtube.com/watch?v=F1i40rnpOsA) for a reason: realistic motion in video is an illusion created by quickly changing static images at a consistent speed. We refer to each of these images as frames. The number of frames that is displayed each second has a direct impact on how smooth and ultimately life-like a video (or user interface) seems to be. iOS devices display 60 frames per second, which gives you and the UI system about 16.67ms to do all of the work needed to generate the static image (frame) that the user will see on the screen for that interval. If you are unable to do the work necessary to generate that frame within the allotted 16.67ms, then you will \"drop a frame\" and the UI will appear unresponsive.",
      "source_content_hash": "c9ea2dc435b697d958902c131eee1ffbc9b87d3816c6ab177855e5647a90f937",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您的祖父母輩將電影稱為「活動影像」是有原因的：影片中逼真的動畫效果其實是一種錯覺，通過以固定速度快速切換靜態圖像來實現。我們將這些圖像中的每一張稱為「幀」。每秒顯示的幀數直接影響影片（或用戶界面）的流暢度和最終的逼真程度。iOS 設備每秒顯示 60 幀，這意味著您和 UI 系統大約有 16.67 毫秒的時間來完成生成該時間段內用戶將在螢幕上看到的靜態圖像（幀）所需的所有工作。如果您無法在分配的 16.67 毫秒內完成生成該幀所需的工作，則會「掉幀」，UI 將顯得無響應。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Now to confuse the matter a little bit, open up the [Dev Menu](debugging.md#accessing-the-dev-menu) in your app and toggle `Show Perf Monitor`. You will notice that there are two different frame rates.",
      "source_content_hash": "7630ee0a1091d27ea5b67b33c7a0aa375877e802d100db56222112cb7d27e2a7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在稍微複雜一點的是，在您的應用程式中打開[開發者菜單](debugging.md#accessing-the-dev-menu)並切換「顯示效能監視器」。您會注意到有兩個不同的幀率。"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "![](/docs/assets/PerfUtil.png)",
      "source_content_hash": "b4354d6ca8fbbb1023f977515c51b4983d02ea5ad2493c0ff496cd29a1900342",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![](/docs/assets/PerfUtil.png)"
      }
    },
    {
      "segment_id": "d350c018",
      "source_content": "### JS frame rate (JavaScript thread)",
      "source_content_hash": "06c64f18ca130c2da372155ba3b2881033f9b2f388721d1917d5344b1b2a822c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### JS 幀率（JavaScript 線程）"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "For most React Native applications, your business logic will run on the JavaScript thread. This is where your React application lives, API calls are made, touch events are processed, etc... Updates to native-backed views are batched and sent over to the native side at the end of each iteration of the event loop, before the frame deadline (if all goes well). If the JavaScript thread is unresponsive for a frame, it will be considered a dropped frame. For example, if you were to call `this.setState` on the root component of a complex application and it resulted in re-rendering computationally expensive component subtrees, it's conceivable that this might take 200ms and result in 12 frames being dropped. Any animations controlled by JavaScript would appear to freeze during that time. If anything takes longer than 100ms, the user will feel it.",
      "source_content_hash": "8f8feba3808c9f68281a686c858dad2d3256a6962ea7755a8798de98c243c069",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "對於大多數 React Native 應用程式，您的業務邏輯將在 JavaScript 線程上運行。這是您的 React 應用程式所在的地方，API 調用、觸摸事件處理等都在這裡進行... 對原生視圖的更新會在事件循環的每次迭代結束時批量發送到原生端，在幀截止時間之前（如果一切順利）。如果 JavaScript 線程在某一幀期間無響應，則會被視為掉幀。例如，如果您在一個複雜應用程式的根組件上調用 `this.setState`，並導致重新渲染計算量大的組件子樹，這可能會花費 200 毫秒並導致 12 幀丟失。在此期間，任何由 JavaScript 控制的動畫都會看起來像是凍結了。如果任何操作花費超過 100 毫秒，用戶就會感覺到卡頓。"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "This often happens during `Navigator` transitions: when you push a new route, the JavaScript thread needs to render all of the components necessary for the scene in order to send over the proper commands to the native side to create the backing views. It's common for the work being done here to take a few frames and cause [jank](http://jankfree.org/) because the transition is controlled by the JavaScript thread. Sometimes components will do additional work on `componentDidMount`, which might result in a second stutter in the transition.",
      "source_content_hash": "223e26e653b1e65c190ce8d7d926610fd85514a60c24296d928570c112978915",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這種情況經常發生在 `Navigator` 過渡期間：當您推送一個新路由時，JavaScript 線程需要渲染場景所需的所有組件，以便向原生端發送正確的命令來創建底層視圖。這裡的工作通常會花費幾幀的時間，並導致[卡頓](http://jankfree.org/)，因為過渡是由 JavaScript 線程控制的。有時組件會在 `componentDidMount` 中執行額外的工作，這可能導致過渡過程中出現第二次卡頓。"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "Another example is responding to touches: if you are doing work across multiple frames on the JavaScript thread, you might notice a delay in responding to `TouchableOpacity`, for example. This is because the JavaScript thread is busy and cannot process the raw touch events sent over from the main thread. As a result, `TouchableOpacity` cannot react to the touch events and command the native view to adjust its opacity.",
      "source_content_hash": "0a9fa7e73ec44d08e4adecb2551e6acd1b64aaffc146c7c9ca2da592a5bda971",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "另一個例子是觸摸響應：如果您在 JavaScript 線程上跨多幀執行工作，您可能會注意到 `TouchableOpacity` 等組件的響應延遲。這是因為 JavaScript 線程繁忙，無法處理從主線程發送的原始觸摸事件。因此，`TouchableOpacity` 無法對觸摸事件做出反應並命令原生視圖調整其不透明度。"
      }
    },
    {
      "segment_id": "79b2d0b9",
      "source_content": "### UI frame rate (main thread)",
      "source_content_hash": "db30195649214120a00293951897ee834fa6a00827580824b632d984ca0ebf40",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### UI 幀率（主線程）"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "Many people have noticed that performance of `NavigatorIOS` is better out of the box than `Navigator`. The reason for this is that the animations for the transitions are done entirely on the main thread, and so they are not interrupted by frame drops on the JavaScript thread.",
      "source_content_hash": "703bb6ff4a6f1da22d6700c547dff6f0347230101de3048ad55588b2e28de88e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "許多人注意到 `NavigatorIOS` 的開箱即用性能優於 `Navigator`。原因是過渡的動畫完全在主線程上完成，因此不會受到 JavaScript 線程掉幀的影響。"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "Similarly, you can happily scroll up and down through a `ScrollView` when the JavaScript thread is locked up because the `ScrollView` lives on the main thread. The scroll events are dispatched to the JS thread, but their receipt is not necessary for the scroll to occur.",
      "source_content_hash": "f6d3f49fbbb8a867c4dba917ec0838e73932250dd87b7e60038aae33ab1bf778",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "同樣地，當 JavaScript 執行緒被鎖定時，您仍能順暢地在 `ScrollView` 中上下滾動，因為 `ScrollView` 運作於主執行緒上。滾動事件會被派發至 JS 執行緒，但滾動行為的執行無需等待這些事件被接收處理。"
      }
    },
    {
      "segment_id": "b25f21be",
      "source_content": "## Common sources of performance problems",
      "source_content_hash": "3ab79a2a4626da3c575a41dab23887cf2abcd94b8a005730b028aee62297e2c4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 常見效能問題來源"
      }
    },
    {
      "segment_id": "a1b3d8cb",
      "source_content": "### Running in development mode (`dev=true`)",
      "source_content_hash": "2793470032aa56027a30e01c72814a1beea7c98397cead64ea7fc0bcf816fb6c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 處於開發模式（`dev=true`）"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "JavaScript thread performance suffers greatly when running in dev mode. This is unavoidable: a lot more work needs to be done at runtime to provide you with good warnings and error messages, such as validating propTypes and various other assertions. Always make sure to test performance in [release builds](running-on-device.md#building-your-app-for-production).",
      "source_content_hash": "b32ed0cc9d298bfe47a7a1ef4cf67a65f6d2dc9c06079cfebb877f9262eb24af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在開發模式下，JavaScript 執行緒的效能會大幅下降。這是不可避免的：為了提供完善的警告和錯誤訊息（例如驗證 propTypes 和其他斷言），運行時需執行更多工作。請務必在[正式版建置](running-on-device.md#building-your-app-for-production)中測試效能表現。"
      }
    },
    {
      "segment_id": "80d9e13c",
      "source_content": "### Using `console.log` statements",
      "source_content_hash": "6213444127b95584fb1aeab868a825da1c2e5915aab7c95f5c385fef0504ebac",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用 `console.log` 語句"
      }
    },
    {
      "segment_id": "33331f27",
      "source_content": "When running a bundled app, these statements can cause a big bottleneck in the JavaScript thread. This includes calls from debugging libraries such as [redux-logger](https://github.com/evgenyrodionov/redux-logger), so make sure to remove them before bundling. You can also use this [babel plugin](https://babeljs.io/docs/plugins/transform-remove-console/) that removes all the `console.*` calls. You need to install it first with `npm i babel-plugin-transform-remove-console --save-dev`, and then edit the `.babelrc` file under your project directory like this:",
      "source_content_hash": "1d5eb521dbec89e5f1566da9847fdbb517fdd0845b3d7205898bc80a10ba525e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在執行打包後的應用程式時，這些語句會嚴重阻塞 JavaScript 執行緒。這包含來自除錯函式庫（如 [redux-logger](https://github.com/evgenyrodionov/redux-logger)）的呼叫，請務必在打包前移除它們。您也可以使用這個 [babel 插件](https://babeljs.io/docs/plugins/transform-remove-console/)自動移除所有 `console.*` 呼叫。需先透過 `npm i babel-plugin-transform-remove-console --save-dev` 安裝，然後編輯專案目錄下的 `.babelrc` 檔案如下："
      }
    },
    {
      "segment_id": "026f2f3e",
      "source_content": "```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-remove-console\"]\n    }\n  }\n}\n```",
      "source_content_hash": "404c6b02795f3b8bb68bc9ce60ce5e92457f76e737619510b6de25b46719e7a8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_026f2f3e"
      }
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "This will automatically remove all `console.*` calls in the release (production) versions of your project.",
      "source_content_hash": "e23415699812a418caac7a9ea461477d5efa5b9f996496e136c76ce0f5890c01",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這將在專案的正式（生產）版本中自動移除所有 `console.*` 呼叫。"
      }
    },
    {
      "segment_id": "b36c6338",
      "source_content": "It is recommended to use the plugin even if no `console.*` calls are made in your project. A third party library could also call them.",
      "source_content_hash": "571490cc84f21ab4a0b94eba1ef6126e8dcb8d543e395b1dcfc002c58e9cd1e9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "即使專案中沒有直接使用 `console.*` 呼叫，仍建議使用此插件。第三方函式庫也可能會呼叫這些方法。"
      }
    },
    {
      "segment_id": "2c1b51df",
      "source_content": "### `ListView` initial rendering is too slow or scroll performance is bad for large lists",
      "source_content_hash": "c8f712a8d4b0033bb09f82355476b75a077726264aedfe659763398e8cb5198b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `ListView` 初始渲染過慢或大型列表滾動效能不佳"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "Use the new [`FlatList`](flatlist.md) or [`SectionList`](sectionlist.md) component instead. Besides simplifying the API, the new list components also have significant performance enhancements, the main one being nearly constant memory usage for any number of rows.",
      "source_content_hash": "b0c1665c4d8c84fb02557ca553a2105d367202daa7fcd2bd13d1f19ca1ffcb80",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請改用新的 [`FlatList`](flatlist.md) 或 [`SectionList`](sectionlist.md) 元件。除了簡化 API 外，新列表元件還具備顯著的效能優化，主要特點是無論行數多少，記憶體使用量幾乎保持恆定。"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "If your [`FlatList`](flatlist.md) is rendering slow, be sure that you've implemented [`getItemLayout`](flatlist.md#getitemlayout) to optimize rendering speed by skipping measurement of the rendered items.",
      "source_content_hash": "43fb714cb0909a67a37d90019ec6d3e2fcccb596b4b67fa5e9d5473601f6af5f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您的 [`FlatList`](flatlist.md) 渲染速度緩慢，請確認已實作 [`getItemLayout`](flatlist.md#getitemlayout) 以跳過渲染項目的測量步驟，從而優化渲染速度。"
      }
    },
    {
      "segment_id": "c431704b",
      "source_content": "### JS FPS plunges when re-rendering a view that hardly changes",
      "source_content_hash": "9b4e1bc1089f12b1ddb47a4d7323e0308c4cbf5fbbe6bf5af1f4d1dfe58dc194",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 重新渲染幾乎未變化的視圖導致 JS FPS 驟降"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "If you are using a ListView, you must provide a `rowHasChanged` function that can reduce a lot of work by quickly determining whether or not a row needs to be re-rendered. If you are using immutable data structures, this would only need to be a reference equality check.",
      "source_content_hash": "5c26b10a2be3250ecf4421b32b657da2ff61c0c9e240704e00fd393d6f423b38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若使用 ListView，必須提供 `rowHasChanged` 函式，透過快速判斷行是否需要重新渲染來大幅減少工作量。若採用不可變資料結構，僅需進行參考相等性檢查即可。"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "Similarly, you can implement `shouldComponentUpdate` and indicate the exact conditions under which you would like the component to re-render. If you write pure components (where the return value of the render function is entirely dependent on props and state), you can leverage PureComponent to do this for you. Once again, immutable data structures are useful to keep this fast -- if you have to do a deep comparison of a large list of objects, it may be that re-rendering your entire component would be quicker, and it would certainly require less code.",
      "source_content_hash": "3bd44bba111d2e8509a940621e55c4066c8327ede6ad2580f259db131001b042",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "同樣地，可實作 `shouldComponentUpdate` 並明確指定觸發元件重新渲染的條件。若編寫純粹元件（渲染函式的返回值完全依賴於 props 和 state），可透過 PureComponent 自動實現此功能。再次強調，不可變資料結構能保持高效——若需對大型物件列表進行深度比較，直接重新渲染整個元件可能更快，且程式碼量更少。"
      }
    },
    {
      "segment_id": "bd92edfc",
      "source_content": "### Dropping JS thread FPS because of doing a lot of work on the JavaScript thread at the same time",
      "source_content_hash": "cb95ab14fadbca4ec8e90cf3f58b76a97022d9c379b635078d4d65e6a3adc64c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 因 JavaScript 執行緒同時處理大量工作導致 JS FPS 下降"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "\"Slow Navigator transitions\" is the most common manifestation of this, but there are other times this can happen. Using InteractionManager can be a good approach, but if the user experience cost is too high to delay work during an animation, then you might want to consider LayoutAnimation.",
      "source_content_hash": "f0f90dd65d8ac9955f66a6515e739d01b523d8bf1f1e2219aad211bdd76e3b84",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "「導覽器轉場動畫卡頓」是最常見的表徵，但其他情況也可能發生。使用 InteractionManager 是良好的解決方案，但若延遲動畫期間的工作會嚴重影響使用者體驗，則可考慮改用 LayoutAnimation。"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "The Animated API currently calculates each keyframe on-demand on the JavaScript thread unless you [set `useNativeDriver: true`](/blog/2017/02/14/using-native-driver-for-animated#how-do-i-use-this-in-my-app), while LayoutAnimation leverages Core Animation and is unaffected by JS thread and main thread frame drops.",
      "source_content_hash": "773d0c0354d17296056037667501fadc125e1ca74b25728ef32b1a4ff9ed80fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "目前 Animated API 會在 JavaScript 執行緒上按需計算每個關鍵影格（除非[設定 `useNativeDriver: true`](/blog/2017/02/14/using-native-driver-for-animated#how-do-i-use-this-in-my-app)），而 LayoutAnimation 基於 Core Animation 實現，不受 JS 執行緒和主執行緒掉幀影響。"
      }
    },
    {
      "segment_id": "883231d4",
      "source_content": "One case where I have used this is for animating in a modal (sliding down from top and fading in a translucent overlay) while initializing and perhaps receiving responses for several network requests, rendering the contents of the modal, and updating the view where the modal was opened from. See the Animations guide for more information about how to use LayoutAnimation.",
      "source_content_hash": "9b64575c5b2942e660abfe8103789986687a28be48048a3a855170f2d08653ca",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我曾將此技術應用於模態視窗動畫（從頂部滑下並淡入半透明遮罩），同時初始化多個網路請求、渲染模態內容並更新開啟模態的原始視圖。詳見動畫指南以獲取更多 LayoutAnimation 的使用方法。"
      }
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "Caveats:",
      "source_content_hash": "f9cce053f957e09218867a6dbf4ebed6e281ab13783521abd23a886fca81a5e3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意事項："
      }
    },
    {
      "segment_id": "6384b3d4",
      "source_content": "- LayoutAnimation only works for fire-and-forget animations (\"static\" animations) -- if it must be interruptible, you will need to use `Animated`.",
      "source_content_hash": "730d983f670274e1085599c5472e13e6bd6c9117c63d21363b60f82b941bc55d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- LayoutAnimation 僅適用於「一發不可收」的動畫（「靜態」動畫）——如果需要中斷動畫，則必須使用 `Animated`。"
      }
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "### Moving a view on the screen (scrolling, translating, rotating) drops UI thread FPS",
      "source_content_hash": "e92fba46c8f3c5a6cbb25b20d8ce063c0800c2c24e5dbe72cf0ca5665bdc9fa5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 在螢幕上移動視圖（滾動、平移、旋轉）導致 UI 執行緒 FPS 下降"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "This is especially true when you have text with a transparent background positioned on top of an image, or any other situation where alpha compositing would be required to re-draw the view on each frame. You will find that enabling `shouldRasterizeIOS` or `renderToHardwareTextureAndroid` can help with this significantly.",
      "source_content_hash": "91f362fa7b35db71488810221507836877843d23c9838c502d558d9b62da3a8f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當文字帶有透明背景並疊加在圖片上，或任何需要每幀重新繪製視圖的 alpha 合成情境時，此問題尤其明顯。啟用 `shouldRasterizeIOS` 或 `renderToHardwareTextureAndroid` 屬性可大幅改善此情況。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "Be careful not to overuse this or your memory usage could go through the roof. Profile your performance and memory usage when using these props. If you don't plan to move a view anymore, turn this property off.",
      "source_content_hash": "2c185a6c362eeca4fd11a08a848748e14b781068b58bc05d0935ae1ec2530a27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意避免過度使用這些屬性，否則記憶體用量可能暴增。使用時請務必分析效能和記憶體用量。若視圖不再需要移動，請關閉此屬性。"
      }
    },
    {
      "segment_id": "1c598ecd",
      "source_content": "### Animating the size of an image drops UI thread FPS",
      "source_content_hash": "a76e5d0dc319ce79d17d428efdb388e3ef93d95552187229fe0281d4598fe068",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 調整圖片尺寸動畫導致 UI 執行緒 FPS 下降"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "On iOS, each time you adjust the width or height of an Image component it is re-cropped and scaled from the original image. This can be very expensive, especially for large images. Instead, use the `transform: [{scale}]` style property to animate the size. An example of when you might do this is when you tap an image and zoom it in to full screen.",
      "source_content_hash": "4a2a220654144f8b6d363c6f5002a8b2935f0024a549492e7a8bcc99e5de343e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 iOS 上，每次調整 Image 元件的寬高時，系統會從原始圖片重新裁剪和縮放。這對大圖尤其耗費資源。建議改用 `transform: [{scale}]` 樣式屬性來實現尺寸動畫。例如點擊圖片放大至全螢幕的情境。"
      }
    },
    {
      "segment_id": "90d35b51",
      "source_content": "### My TouchableX view isn't very responsive",
      "source_content_hash": "ee29a8f748e94b6db503fdfd023b731753d970714015f7ffa7021adba7936a29",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 我的 TouchableX 元件反應遲鈍"
      }
    },
    {
      "segment_id": "86348f98",
      "source_content": "Sometimes, if we do an action in the same frame that we are adjusting the opacity or highlight of a component that is responding to a touch, we won't see that effect until after the `onPress` function has returned. If `onPress` does a `setState` that results in a lot of work and a few frames dropped, this may occur. A solution to this is to wrap any action inside of your `onPress` handler in `requestAnimationFrame`:",
      "source_content_hash": "d7c82f591daa7fdd39e72060a2a7d37ec2104e23e8974819261ded97ee94707a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若在調整觸控回應元件的透明度或高亮效果的同一幀中執行操作，可能直到 `onPress` 函數返回後才會看到效果。當 `onPress` 觸發的 `setState` 導致大量運算和掉幀時，此現象更明顯。解決方案是將 `onPress` 處理程序內的操作包裹在 `requestAnimationFrame` 中："
      }
    },
    {
      "segment_id": "daa16011",
      "source_content": "```tsx\nhandleOnPress() {\n  requestAnimationFrame(() => {\n    this.doExpensiveAction();\n  });\n}\n```",
      "source_content_hash": "08d5650002e2d9b6cb702be76fb076418d0cb64b4579fa3262f7e2a366e8383c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_daa16011"
      }
    },
    {
      "segment_id": "a138e327",
      "source_content": "### Slow navigator transitions",
      "source_content_hash": "22f4360013dd091febda63837591b3485a9716c4e87fd5436f6dae9ff6dafa26",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 導航轉場動畫卡頓"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "As mentioned above, `Navigator` animations are controlled by the JavaScript thread. Imagine the \"push from right\" scene transition: each frame, the new scene is moved from the right to left, starting offscreen (let's say at an x-offset of 320) and ultimately settling when the scene sits at an x-offset of 0. Each frame during this transition, the JavaScript thread needs to send a new x-offset to the main thread. If the JavaScript thread is locked up, it cannot do this and so no update occurs on that frame and the animation stutters.",
      "source_content_hash": "ebbb6847aeeea2a190a7442c86dbedfe2fa2c6b4d1b3528df459376cf2a5cf7d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如前所述，`Navigator` 動畫由 JavaScript 執行緒控制。以「從右側推入」場景轉場為例：每幀需將新場景從 x 偏移 320（螢幕外）移動至 x 偏移 0。若 JavaScript 執行緒被鎖定，無法發送新偏移值，就會導致動畫掉幀。"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "One solution to this is to allow for JavaScript-based animations to be offloaded to the main thread. If we were to do the same thing as in the above example with this approach, we might calculate a list of all x-offsets for the new scene when we are starting the transition and send them to the main thread to execute in an optimized way. Now that the JavaScript thread is freed of this responsibility, it's not a big deal if it drops a few frames while rendering the scene -- you probably won't even notice because you will be too distracted by the pretty transition.",
      "source_content_hash": "dda31734c29e0c33a573b63d1726c9eab09f4543a560f3afeb4be82637d6cc73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "解決方案之一是將基於 JavaScript 的動畫卸載到主執行緒執行。例如預先計算轉場過程的所有 x 偏移值並提交給主執行緒優化執行。如此 JavaScript 執行緒即使掉幀也不影響動畫流暢度。"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "Solving this is one of the main goals behind the new [React Navigation](navigation.md) library. The views in React Navigation use native components and the [`Animated`](animated.md) library to deliver 60 FPS animations that are run on the native thread.",
      "source_content_hash": "b2525e61ed830dc374f8e1aa6fee3e4bb479a503391bf2f8726ec88dace6b040",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新推出的 [React Navigation](navigation.md) 庫正是為解決此問題而設計。它採用原生元件和 [`Animated`](animated.md) 庫，在主執行緒上實現 60 FPS 的流暢動畫。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.72/performance.md",
  "last_updated_timestamp": "2025-06-18T18:19:07.413080+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "8fdaf3ef2a1921edb143cf501c7dc8c39ac8a961bfc38c99e81b2dd636bf0059"
  }
}