{
  "source_file_path_relative_to_docusaurus_root": "architecture/fabric-renderer.md",
  "source_file_content_hash": "41ae3b7b253e22e21775a9efe7f5f67083155abe5745b9287c6acb0500539116",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: fabric-renderer\ntitle: Fabric\n---",
      "source_content_hash": "a0d9e1a16f0920b42c11a799dd822d57823668a37e291c047506b5e48808e89d",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Fabric is React Native's new rendering system, a conceptual evolution of the legacy render system. The core principles are to unify more render logic in C++, improve interoperability with [host platforms](architecture-glossary.md#host-platform), and to unlock new capabilities for React Native. Development began in 2018 and in 2021, React Native in the Facebook app is backed by the new renderer.",
      "source_content_hash": "c436675bec42841ff22511b8b553a53ab44d80c9b93a60cfc1721ae3a0c13d33",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Fabric 是 React Native 的新渲染系統，為舊版渲染系統的概念性演進。其核心原則在於將更多渲染邏輯統一至 C++、提升與[宿主平台](architecture-glossary.md#host-platform)的互通性，並為 React Native 開啟新功能。開發始於 2018 年，至 2021 年 Facebook 應用中的 React Native 已全面採用新渲染器。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This documentation provides an overview of the [new renderer](architecture-glossary.md#fabric-render) and its concepts. It avoids platform specifics and doesn’t contain any code snippets or pointers. This documentation covers key concepts, motivation, benefits, and an overview of the render pipeline in different scenarios.",
      "source_content_hash": "0eb2c1606ab81a1dfb0044b3e081ba0f353dd81b6995f56dc9be20a8122beee0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本文件概述[新渲染器](architecture-glossary.md#fabric-render)及其概念，避免平台特定細節且不含程式碼片段或指引。內容涵蓋關鍵概念、動機、優勢，以及不同情境下渲染管線的綜覽。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Motivations and Benefits of the new renderer",
      "source_content_hash": "0176ef7a181d49931d220adaa8d8d1799202a623556be07bda934474ee94d995",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 新渲染器的動機與優勢"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "The render architecture was created to unlock better user experiences that weren’t possible with the legacy architecture. Some examples include:",
      "source_content_hash": "cc4179b39a3ca4fa8314f31a4ec05c0a71811ed2adfcb7fba7383121ee3acc42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此渲染架構旨在實現舊版架構無法達成的更佳使用者體驗，例如："
      }
    },
    {
      "segment_id": "9e760345",
      "source_content": "- With improved interoperability between [host views](architecture-glossary.md#host-view-tree-and-host-view) and React views, the renderer is able to measure and render React surfaces synchronously. In the legacy architecture, React Native layout was asynchronous which led to a layout “jump” issue when embedding a React Native rendered view in a _host view_.\n- With support of multi-priority and synchronous events, the renderer can prioritize certain user interactions to ensure they are handled in a timely manner.\n- [Integration with React Suspense](https://reactjs.org/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html) which allows for more intuitive design of data fetching in React apps.\n- Enable React [Concurrent Features](https://github.com/reactwg/react-18/discussions/4) on React Native.\n- Easier to implement server side rendering for React Native.",
      "source_content_hash": "08669b372c61f2537cae574d5c0ccfc54660d63b18d01782f1aea11537828c3e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 透過提升[宿主視圖](architecture-glossary.md#host-view-tree-and-host-view)與 React 視圖的互通性，渲染器能同步測量並渲染 React 介面。舊版架構中，React Native 布局為非同步，導致嵌入宿主視圖時產生布局「跳動」問題。\n- 支援多優先級與同步事件，使渲染器能優先處理特定使用者互動以確保即時響應。\n- [與 React Suspense 整合](https://reactjs.org/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html)，實現更直觀的 React 應用資料獲取設計。\n- 在 React Native 啟用 React [並行功能](https://github.com/reactwg/react-18/discussions/4)。\n- 更易實作 React Native 的伺服器端渲染。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "The new architecture also provides benefits in code quality, performance, and extensibility:",
      "source_content_hash": "73ec8b4d991853cb7be68235069fa46bb086080411bb5a9037fe9699b69d6858",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構亦在程式碼品質、效能與擴展性帶來優勢："
      }
    },
    {
      "segment_id": "da23c906",
      "source_content": "- **Type safety:** code generation to ensure type safety across the JS and [host platforms](architecture-glossary.md#host-platform). The code generation uses JavaScript component declarations as source of truth to generate C++ structs to hold the props. Mismatch between JavaScript and host component props triggers a build error.\n- **Shared C++ core**: the renderer is implemented in C++ and the core is shared among platforms. This increases consistency and makes it easier to adopt React Native on new platforms.\n- **Better Host Platform Interoperability**: Synchronous and thread-safe layout calculation improves user experiences when embedding host components into React Native, which means easier integration with host platform frameworks that require synchronous APIs.\n- **Improved Performance**: With the new cross-platform implementation of the renderer system, every platform benefits from performance improvements that may have been motivated by limitations of one platform. For example, view flattening was originally a performance solution for Android and is now provided by default on both Android and iOS.\n- **Consistency**: The new render system is cross-platform, it is easier to keep consistency among different platforms.\n- **Faster Startup**: Host components are lazily initialized by default.\n- **Less serialization of data between JS and host platform**: React used to transfer data between JavaScript and _host platform_ as serialized JSON. The new renderer improves the transfer of data by accessing JavaScript values directly using [JavaScript Interfaces (JSI)](architecture-glossary.md#javascript-interfaces-jsi).",
      "source_content_hash": "3bebe84e64acd72030d2024b69fcc231410c70926a9cd2e59eb9cb0565e3bde3",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **型別安全**：透過程式碼生成確保 JavaScript 與[宿主平台](architecture-glossary.md#host-platform)間的型別安全。以 JavaScript 元件宣告為唯一來源，生成 C++ 結構體儲存屬性，若屬性不匹配將觸發建置錯誤。\n- **共享 C++ 核心**：渲染器以 C++ 實作，核心程式碼跨平台共享，提升一致性並簡化新平台的適配。\n- **更佳宿主平台互通性**：同步且執行緒安全的布局計算，改善嵌入宿主元件至 React Native 的使用體驗，意味著更易整合需同步 API 的宿主平台框架。\n- **效能提升**：跨平台實作的渲染系統，使各平台皆能受益於單一平台痛點驅動的改進。例如視圖扁平化原為 Android 的效能解方，現預設支援 Android 與 iOS。\n- **一致性**：跨平台的新渲染系統更易維持多平台一致性。\n- **更快啟動**：宿主元件預設採用延遲初始化。\n- **減少 JavaScript 與宿主平台間的資料序列化**：舊版 React 需將資料序列化為 JSON 傳輸，新渲染器透過 [JavaScript 介面 (JSI)](architecture-glossary.md#javascript-interfaces-jsi) 直接存取 JavaScript 值來優化傳輸效率。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs-architecture/fabric-renderer.md",
  "last_updated_timestamp": "2025-06-18T18:19:07.203767+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "41ae3b7b253e22e21775a9efe7f5f67083155abe5745b9287c6acb0500539116"
  }
}